[
  {
    "objectID": "content/subpage.html",
    "href": "content/subpage.html",
    "title": "Title Text",
    "section": "",
    "text": "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam"
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Document_Title",
    "section": "",
    "text": "This is a template repo to set up Quarto websites. The main purpose is to quickly set up repos for new websites with consistent style. It also comes with integrated github actions to render the website automatically once content is added.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/index.html#overview",
    "href": "content/index.html#overview",
    "title": "Document_Title",
    "section": "Overview",
    "text": "Overview\nQuarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "objectID": "content/index.html#text-formatting",
    "href": "content/index.html#text-formatting",
    "title": "Document_Title",
    "section": "Text Formatting",
    "text": "Text Formatting\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics*, **bold**, ***bold italics***\nitalics, bold, bold italics\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code"
  },
  {
    "objectID": "content/index.html#headings",
    "href": "content/index.html#headings",
    "title": "Document_Title",
    "section": "Headings",
    "text": "Headings\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6"
  },
  {
    "objectID": "content/index.html#links-images",
    "href": "content/index.html#links-images",
    "title": "Document_Title",
    "section": "Links & Images",
    "text": "Links & Images\n&lt;https://quarto.org&gt;                                                                                                                                                 \nhttps://quarto.org\n[Quarto](https://quarto.org)                                                                                                                                         \nQuarto\n![Caption](/images/logo.png)                                                                                                                   \n\n\n\nCaption\n\n\n[![Caption](/images/logo.png)](https://quarto.org)                                                                                             \n\n\n\nCaption\n\n\n[![Caption](/images/logo.png)](https://quarto.org \" contour-lines\")                                                                               \n![Caption](/images/logo.png ” contour-lines”){fig-alt=“A line drawing of contour-lines.”}\n[![](/images/logo.png){fig-alt=\"Alt text\"}](https://quarto.org)"
  },
  {
    "objectID": "content/index.html#lists",
    "href": "content/index.html#lists",
    "title": "Document_Title",
    "section": "Lists",
    "text": "Lists\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n        - sub-sub-item 1\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n*   item 2\n\n    Continued (indent 4 spaces)\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n         A.  sub-sub-item 1\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n(@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption\n\nA list whose numbering\n\ncontinues after\n\nan interruption\n\n\n\n::: {}\n1. A list\n:::\n\n::: {}\n1. Followed by another list\n:::\n\n\nA list\n\n\n\n\nFollowed by another list\n\n\n\n\nterm\n: definition\n\nterm\n\ndefinition\n\n\n\n\n\nNote that unlike other Markdown renderers (notably Jupyter and GitHub), lists in Quarto require an entire blank line above the list. Otherwise the list will not be rendered in list form, rather it will all appear as normal text along a single line."
  },
  {
    "objectID": "content/index.html#tables",
    "href": "content/index.html#tables",
    "title": "Document_Title",
    "section": "Tables",
    "text": "Tables\n\nMarkdown Syntax\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n\nOutput\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1"
  },
  {
    "objectID": "content/index.html#source-code",
    "href": "content/index.html#source-code",
    "title": "Document_Title",
    "section": "Source Code",
    "text": "Source Code\nUse ``` to delimit blocks of source code:\n```\ncode\n```\nAdd a language to syntax highlight code blocks:\n```python\n1 + 1\n```\nPandoc supports syntax highlighting for over 140 different languages. If your language is not supported then you can use the default language to get a similar visual treatment:\n```default\ncode\n```\nNaming code blocks like\n```{.r filename=\"script.r\"}\n1+1\n```\ngives\n\n\nscript.r\n\n1+1"
  },
  {
    "objectID": "content/index.html#equations",
    "href": "content/index.html#equations",
    "title": "Document_Title",
    "section": "Equations",
    "text": "Equations\nUse $ delimiters for inline math and $$ delimiters for display math. For example:\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\ninline math: $E = mc^{2}$\ninline math: \\(E=mc^{2}\\)\n\n\ndisplay math:\n\n$$E = mc^{2}$$\ndisplay math:\n\\[E = mc^{2}\\]\n\n\n\nIf you want to define custom TeX macros, include them within $$ delimiters enclosed in a .hidden block. For example:\n::: {.hidden}\n$$\n \\def\\RR{{\\bf R}}\n \\def\\bold#1{{\\bf #1}}\n$$\n:::\nFor HTML math processed using MathJax (the default) you can use the \\def, \\newcommand, \\renewcommand, \\newenvironment, \\renewenvironment, and \\let commands to create your own macros and environments."
  },
  {
    "objectID": "content/index.html#diagrams",
    "href": "content/index.html#diagrams",
    "title": "Document_Title",
    "section": "Diagrams",
    "text": "Diagrams\nQuarto has native support for embedding Mermaid and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, Gantt charts, and more using a plain text syntax inspired by markdown.\nFor example, here we embed a flowchart created using Mermaid:\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]\n```\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C --&gt; D[Result one]\n  C --&gt; E[Result two]"
  },
  {
    "objectID": "content/index.html#videos",
    "href": "content/index.html#videos",
    "title": "Document_Title",
    "section": "Videos",
    "text": "Videos\nYou can include videos in documents using the {{&lt; video &gt;}} shortcode. For example, here we embed a YouTube video:\n{{&lt; video https://www.youtube.com/embed/wo9vZccmqwc &gt;}}"
  },
  {
    "objectID": "content/index.html#divs-and-spans",
    "href": "content/index.html#divs-and-spans",
    "title": "Document_Title",
    "section": "Divs and Spans",
    "text": "Divs and Spans\nYou can add classes, attributes, and other identifiers to regions of content using Divs and Spans (you’ll see an example of this below in Callout Blocks).\nFor example, here we add the “border” class to a region of content using a div (:::):\n::: {.border}\nThis content can be styled with a border\n:::\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;div class=\"border\"&gt;\n  &lt;p&gt;This content can be styled with a border&lt;/p&gt;\n&lt;/div&gt;\nDivs start with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The Div ends with another line containing a string of at least three consecutive colons. The Div should be separated by blank lines from preceding and following blocks. Divs may also be nested. For example\n::::: {#special .sidebar}\n\n::: {.warning}\nHere is a warning.\n:::\n\nMore content.\n:::::\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;div id=\"special\" class=\"sidebar\"&gt;\n  &lt;div class=\"warning\"&gt;\n    &lt;p&gt;Here is a warning.&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;p&gt;More content.&lt;/p&gt;\n&lt;/div&gt;\nFences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.\nA bracketed sequence of inlines, as one would use to begin a link, will be treated as a Span with attributes if it is followed immediately by attributes:\n[This is *some text*]{.class key=\"val\"}\nOnce rendered to HTML, Quarto will translate the markdown into:\n&lt;span class=\"class\" data-key=\"val\"&gt;\n  This is &lt;em&gt;some text&lt;/em&gt;\n&lt;/span&gt;\n\nOrdering of Attributes\nBoth divs and spans in Pandoc can have any combination of identifiers, classes, and (potentially many) key-value attributes. In order for these to be recognized by Pandoc, they have to be provided in a specific order: identifiers, classes, and then key-value attributes. Any of these can be omitted, but must follow that order if they are provided. For example, the following is valid:\n[This is good]{#id .class key1=\"val1\" key2=\"val2\"}\nHowever, the following will not be recognized by Pandoc:\n[This does *not* work!]{.class key=\"val\" #id}\nThis ordering restriction applies to both divs and spans. See Pandoc’s documentation on Divs and Spans for additional details."
  },
  {
    "objectID": "content/index.html#callout-blocks",
    "href": "content/index.html#callout-blocks",
    "title": "Document_Title",
    "section": "Callout Blocks",
    "text": "Callout Blocks\n\nMarkdown Syntax\n:::{.callout-note}\nNote that there are five types of callouts, including: \n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n\nOutput\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nTip\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nCaution\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important.\n\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that there are five types of callouts, including note, tip, warning, caution, and important."
  },
  {
    "objectID": "content/index.html#other-blocks",
    "href": "content/index.html#other-blocks",
    "title": "Document_Title",
    "section": "Other Blocks",
    "text": "Other Blocks\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n&gt; Blockquote\n\nBlockquote\n\n\n\n::: {.classname}\nDiv\n:::\n\nDiv\n\n\n\n| Line Block\n|   Spaces and newlines\n|   are preserved\nLine Block\n   Spaces and newlines\n   are preserved"
  },
  {
    "objectID": "content/index.html#special-characters",
    "href": "content/index.html#special-characters",
    "title": "Document_Title",
    "section": "Special Characters",
    "text": "Special Characters\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\nendash: --\nendash: –\n\n\nemdash: ---\nemdash: —"
  }
]